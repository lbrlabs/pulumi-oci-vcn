// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcn

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Vcn struct {
	pulumi.ResourceState

	// The ID of the internet gateway.
	InternetGatewayId pulumi.StringPtrOutput `pulumi:"internetGatewayId"`
	// The ID of the NAT gateway.
	NatGatewayId pulumi.StringPtrOutput `pulumi:"natGatewayId"`
	// The IDs of the private subnets.
	PrivateSubnetIds pulumi.StringArrayOutput `pulumi:"privateSubnetIds"`
	// The IDs of the public subnets.
	PublicSubnetIds pulumi.StringArrayOutput `pulumi:"publicSubnetIds"`
	// The ID of the service gateway.
	ServiceGatewayId pulumi.StringPtrOutput `pulumi:"serviceGatewayId"`
	// The ID of the VCN.
	VcnId pulumi.StringOutput `pulumi:"vcnId"`
}

// NewVcn registers a new resource with the given unique name, arguments, and options.
func NewVcn(ctx *pulumi.Context,
	name string, args *VcnArgs, opts ...pulumi.ResourceOption) (*Vcn, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	var resource Vcn
	err := ctx.RegisterRemoteComponentResource("oci-vcn:index:Vcn", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type vcnArgs struct {
	// Cidr block to use for VCN
	CidrBlock string `pulumi:"cidrBlock"`
	// Compartment ID to deploy into
	CompartmentId         string `pulumi:"compartmentId"`
	CreateInternetGateway *bool  `pulumi:"createInternetGateway"`
	CreateNatGateway      *bool  `pulumi:"createNatGateway"`
	CreateServiceGateway  *bool  `pulumi:"createServiceGateway"`
	// DNS labels for VCN
	DnsLabel *string `pulumi:"dnsLabel"`
	// Enable ipv6 for VCN
	Ipv6Enabled *bool `pulumi:"ipv6Enabled"`
	// Number of public and private subnets to create
	NumberOfSubnets *float64 `pulumi:"numberOfSubnets"`
}

// The set of arguments for constructing a Vcn resource.
type VcnArgs struct {
	// Cidr block to use for VCN
	CidrBlock string
	// Compartment ID to deploy into
	CompartmentId         pulumi.StringInput
	CreateInternetGateway *bool
	CreateNatGateway      *bool
	CreateServiceGateway  *bool
	// DNS labels for VCN
	DnsLabel pulumi.StringPtrInput
	// Enable ipv6 for VCN
	Ipv6Enabled pulumi.BoolPtrInput
	// Number of public and private subnets to create
	NumberOfSubnets *float64
}

func (VcnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vcnArgs)(nil)).Elem()
}

type VcnInput interface {
	pulumi.Input

	ToVcnOutput() VcnOutput
	ToVcnOutputWithContext(ctx context.Context) VcnOutput
}

func (*Vcn) ElementType() reflect.Type {
	return reflect.TypeOf((**Vcn)(nil)).Elem()
}

func (i *Vcn) ToVcnOutput() VcnOutput {
	return i.ToVcnOutputWithContext(context.Background())
}

func (i *Vcn) ToVcnOutputWithContext(ctx context.Context) VcnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VcnOutput)
}

// VcnArrayInput is an input type that accepts VcnArray and VcnArrayOutput values.
// You can construct a concrete instance of `VcnArrayInput` via:
//
//	VcnArray{ VcnArgs{...} }
type VcnArrayInput interface {
	pulumi.Input

	ToVcnArrayOutput() VcnArrayOutput
	ToVcnArrayOutputWithContext(context.Context) VcnArrayOutput
}

type VcnArray []VcnInput

func (VcnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vcn)(nil)).Elem()
}

func (i VcnArray) ToVcnArrayOutput() VcnArrayOutput {
	return i.ToVcnArrayOutputWithContext(context.Background())
}

func (i VcnArray) ToVcnArrayOutputWithContext(ctx context.Context) VcnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VcnArrayOutput)
}

// VcnMapInput is an input type that accepts VcnMap and VcnMapOutput values.
// You can construct a concrete instance of `VcnMapInput` via:
//
//	VcnMap{ "key": VcnArgs{...} }
type VcnMapInput interface {
	pulumi.Input

	ToVcnMapOutput() VcnMapOutput
	ToVcnMapOutputWithContext(context.Context) VcnMapOutput
}

type VcnMap map[string]VcnInput

func (VcnMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vcn)(nil)).Elem()
}

func (i VcnMap) ToVcnMapOutput() VcnMapOutput {
	return i.ToVcnMapOutputWithContext(context.Background())
}

func (i VcnMap) ToVcnMapOutputWithContext(ctx context.Context) VcnMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VcnMapOutput)
}

type VcnOutput struct{ *pulumi.OutputState }

func (VcnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vcn)(nil)).Elem()
}

func (o VcnOutput) ToVcnOutput() VcnOutput {
	return o
}

func (o VcnOutput) ToVcnOutputWithContext(ctx context.Context) VcnOutput {
	return o
}

// The ID of the internet gateway.
func (o VcnOutput) InternetGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vcn) pulumi.StringPtrOutput { return v.InternetGatewayId }).(pulumi.StringPtrOutput)
}

// The ID of the NAT gateway.
func (o VcnOutput) NatGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vcn) pulumi.StringPtrOutput { return v.NatGatewayId }).(pulumi.StringPtrOutput)
}

// The IDs of the private subnets.
func (o VcnOutput) PrivateSubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Vcn) pulumi.StringArrayOutput { return v.PrivateSubnetIds }).(pulumi.StringArrayOutput)
}

// The IDs of the public subnets.
func (o VcnOutput) PublicSubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Vcn) pulumi.StringArrayOutput { return v.PublicSubnetIds }).(pulumi.StringArrayOutput)
}

// The ID of the service gateway.
func (o VcnOutput) ServiceGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vcn) pulumi.StringPtrOutput { return v.ServiceGatewayId }).(pulumi.StringPtrOutput)
}

// The ID of the VCN.
func (o VcnOutput) VcnId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vcn) pulumi.StringOutput { return v.VcnId }).(pulumi.StringOutput)
}

type VcnArrayOutput struct{ *pulumi.OutputState }

func (VcnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vcn)(nil)).Elem()
}

func (o VcnArrayOutput) ToVcnArrayOutput() VcnArrayOutput {
	return o
}

func (o VcnArrayOutput) ToVcnArrayOutputWithContext(ctx context.Context) VcnArrayOutput {
	return o
}

func (o VcnArrayOutput) Index(i pulumi.IntInput) VcnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vcn {
		return vs[0].([]*Vcn)[vs[1].(int)]
	}).(VcnOutput)
}

type VcnMapOutput struct{ *pulumi.OutputState }

func (VcnMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vcn)(nil)).Elem()
}

func (o VcnMapOutput) ToVcnMapOutput() VcnMapOutput {
	return o
}

func (o VcnMapOutput) ToVcnMapOutputWithContext(ctx context.Context) VcnMapOutput {
	return o
}

func (o VcnMapOutput) MapIndex(k pulumi.StringInput) VcnOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vcn {
		return vs[0].(map[string]*Vcn)[vs[1].(string)]
	}).(VcnOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VcnInput)(nil)).Elem(), &Vcn{})
	pulumi.RegisterInputType(reflect.TypeOf((*VcnArrayInput)(nil)).Elem(), VcnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VcnMapInput)(nil)).Elem(), VcnMap{})
	pulumi.RegisterOutputType(VcnOutput{})
	pulumi.RegisterOutputType(VcnArrayOutput{})
	pulumi.RegisterOutputType(VcnMapOutput{})
}
