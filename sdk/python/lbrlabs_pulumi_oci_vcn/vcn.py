# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['VcnArgs', 'Vcn']

@pulumi.input_type
class VcnArgs:
    def __init__(__self__, *,
                 cidr_block: str,
                 compartment_id: pulumi.Input[str],
                 create_internet_gateway: Optional[bool] = None,
                 create_nat_gateway: Optional[bool] = None,
                 create_service_gateway: Optional[bool] = None,
                 dns_label: Optional[pulumi.Input[str]] = None,
                 ipv6_enabled: Optional[pulumi.Input[bool]] = None,
                 number_of_subnets: Optional[float] = None):
        """
        The set of arguments for constructing a Vcn resource.
        :param str cidr_block: Cidr block to use for VCN
        :param pulumi.Input[str] compartment_id: Compartment ID to deploy into
        :param pulumi.Input[str] dns_label: DNS labels for VCN
        :param pulumi.Input[bool] ipv6_enabled: Enable ipv6 for VCN
        :param float number_of_subnets: Number of public and private subnets to create
        """
        pulumi.set(__self__, "cidr_block", cidr_block)
        pulumi.set(__self__, "compartment_id", compartment_id)
        if create_internet_gateway is not None:
            pulumi.set(__self__, "create_internet_gateway", create_internet_gateway)
        if create_nat_gateway is not None:
            pulumi.set(__self__, "create_nat_gateway", create_nat_gateway)
        if create_service_gateway is not None:
            pulumi.set(__self__, "create_service_gateway", create_service_gateway)
        if dns_label is not None:
            pulumi.set(__self__, "dns_label", dns_label)
        if ipv6_enabled is not None:
            pulumi.set(__self__, "ipv6_enabled", ipv6_enabled)
        if number_of_subnets is not None:
            pulumi.set(__self__, "number_of_subnets", number_of_subnets)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> str:
        """
        Cidr block to use for VCN
        """
        return pulumi.get(self, "cidr_block")

    @cidr_block.setter
    def cidr_block(self, value: str):
        pulumi.set(self, "cidr_block", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Input[str]:
        """
        Compartment ID to deploy into
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="createInternetGateway")
    def create_internet_gateway(self) -> Optional[bool]:
        return pulumi.get(self, "create_internet_gateway")

    @create_internet_gateway.setter
    def create_internet_gateway(self, value: Optional[bool]):
        pulumi.set(self, "create_internet_gateway", value)

    @property
    @pulumi.getter(name="createNatGateway")
    def create_nat_gateway(self) -> Optional[bool]:
        return pulumi.get(self, "create_nat_gateway")

    @create_nat_gateway.setter
    def create_nat_gateway(self, value: Optional[bool]):
        pulumi.set(self, "create_nat_gateway", value)

    @property
    @pulumi.getter(name="createServiceGateway")
    def create_service_gateway(self) -> Optional[bool]:
        return pulumi.get(self, "create_service_gateway")

    @create_service_gateway.setter
    def create_service_gateway(self, value: Optional[bool]):
        pulumi.set(self, "create_service_gateway", value)

    @property
    @pulumi.getter(name="dnsLabel")
    def dns_label(self) -> Optional[pulumi.Input[str]]:
        """
        DNS labels for VCN
        """
        return pulumi.get(self, "dns_label")

    @dns_label.setter
    def dns_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_label", value)

    @property
    @pulumi.getter(name="ipv6Enabled")
    def ipv6_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable ipv6 for VCN
        """
        return pulumi.get(self, "ipv6_enabled")

    @ipv6_enabled.setter
    def ipv6_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ipv6_enabled", value)

    @property
    @pulumi.getter(name="numberOfSubnets")
    def number_of_subnets(self) -> Optional[float]:
        """
        Number of public and private subnets to create
        """
        return pulumi.get(self, "number_of_subnets")

    @number_of_subnets.setter
    def number_of_subnets(self, value: Optional[float]):
        pulumi.set(self, "number_of_subnets", value)


class Vcn(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr_block: Optional[str] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 create_internet_gateway: Optional[bool] = None,
                 create_nat_gateway: Optional[bool] = None,
                 create_service_gateway: Optional[bool] = None,
                 dns_label: Optional[pulumi.Input[str]] = None,
                 ipv6_enabled: Optional[pulumi.Input[bool]] = None,
                 number_of_subnets: Optional[float] = None,
                 __props__=None):
        """
        Create a Vcn resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param str cidr_block: Cidr block to use for VCN
        :param pulumi.Input[str] compartment_id: Compartment ID to deploy into
        :param pulumi.Input[str] dns_label: DNS labels for VCN
        :param pulumi.Input[bool] ipv6_enabled: Enable ipv6 for VCN
        :param float number_of_subnets: Number of public and private subnets to create
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VcnArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Vcn resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VcnArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VcnArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr_block: Optional[str] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 create_internet_gateway: Optional[bool] = None,
                 create_nat_gateway: Optional[bool] = None,
                 create_service_gateway: Optional[bool] = None,
                 dns_label: Optional[pulumi.Input[str]] = None,
                 ipv6_enabled: Optional[pulumi.Input[bool]] = None,
                 number_of_subnets: Optional[float] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VcnArgs.__new__(VcnArgs)

            if cidr_block is None and not opts.urn:
                raise TypeError("Missing required property 'cidr_block'")
            __props__.__dict__["cidr_block"] = cidr_block
            if compartment_id is None and not opts.urn:
                raise TypeError("Missing required property 'compartment_id'")
            __props__.__dict__["compartment_id"] = compartment_id
            __props__.__dict__["create_internet_gateway"] = create_internet_gateway
            __props__.__dict__["create_nat_gateway"] = create_nat_gateway
            __props__.__dict__["create_service_gateway"] = create_service_gateway
            __props__.__dict__["dns_label"] = dns_label
            __props__.__dict__["ipv6_enabled"] = ipv6_enabled
            __props__.__dict__["number_of_subnets"] = number_of_subnets
            __props__.__dict__["internet_gateway_id"] = None
            __props__.__dict__["nat_gateway_id"] = None
            __props__.__dict__["private_subnet_ids"] = None
            __props__.__dict__["public_subnet_ids"] = None
            __props__.__dict__["service_gateway_id"] = None
            __props__.__dict__["vcn_id"] = None
        super(Vcn, __self__).__init__(
            'oci-vcn:index:Vcn',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter(name="internetGatewayId")
    def internet_gateway_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the internet gateway.
        """
        return pulumi.get(self, "internet_gateway_id")

    @property
    @pulumi.getter(name="natGatewayId")
    def nat_gateway_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the NAT gateway.
        """
        return pulumi.get(self, "nat_gateway_id")

    @property
    @pulumi.getter(name="privateSubnetIds")
    def private_subnet_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        The IDs of the private subnets.
        """
        return pulumi.get(self, "private_subnet_ids")

    @property
    @pulumi.getter(name="publicSubnetIds")
    def public_subnet_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        The IDs of the public subnets.
        """
        return pulumi.get(self, "public_subnet_ids")

    @property
    @pulumi.getter(name="serviceGatewayId")
    def service_gateway_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the service gateway.
        """
        return pulumi.get(self, "service_gateway_id")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> pulumi.Output[str]:
        """
        The ID of the VCN.
        """
        return pulumi.get(self, "vcn_id")

