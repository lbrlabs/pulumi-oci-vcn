// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Vcn extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'oci-vcn:index:Vcn';

    /**
     * Returns true if the given object is an instance of Vcn.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vcn {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vcn.__pulumiType;
    }

    /**
     * The ID of the internet gateway.
     */
    public /*out*/ readonly internetGatewayId!: pulumi.Output<string | undefined>;
    /**
     * The ID of the NAT gateway.
     */
    public /*out*/ readonly natGatewayId!: pulumi.Output<string | undefined>;
    /**
     * The IDs of the private subnets.
     */
    public /*out*/ readonly privateSubnetIds!: pulumi.Output<string[]>;
    /**
     * The IDs of the public subnets.
     */
    public /*out*/ readonly publicSubnetIds!: pulumi.Output<string[]>;
    /**
     * The ID of the service gateway.
     */
    public /*out*/ readonly serviceGatewayId!: pulumi.Output<string | undefined>;
    /**
     * The ID of the VCN.
     */
    public /*out*/ readonly vcnId!: pulumi.Output<string>;

    /**
     * Create a Vcn resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VcnArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.cidrBlock === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cidrBlock'");
            }
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            resourceInputs["cidrBlock"] = args ? args.cidrBlock : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["createInternetGateway"] = args ? args.createInternetGateway : undefined;
            resourceInputs["createNatGateway"] = args ? args.createNatGateway : undefined;
            resourceInputs["createServiceGateway"] = args ? args.createServiceGateway : undefined;
            resourceInputs["dnsLabel"] = args ? args.dnsLabel : undefined;
            resourceInputs["ipv6Enabled"] = args ? args.ipv6Enabled : undefined;
            resourceInputs["numberOfSubnets"] = args ? args.numberOfSubnets : undefined;
            resourceInputs["internetGatewayId"] = undefined /*out*/;
            resourceInputs["natGatewayId"] = undefined /*out*/;
            resourceInputs["privateSubnetIds"] = undefined /*out*/;
            resourceInputs["publicSubnetIds"] = undefined /*out*/;
            resourceInputs["serviceGatewayId"] = undefined /*out*/;
            resourceInputs["vcnId"] = undefined /*out*/;
        } else {
            resourceInputs["internetGatewayId"] = undefined /*out*/;
            resourceInputs["natGatewayId"] = undefined /*out*/;
            resourceInputs["privateSubnetIds"] = undefined /*out*/;
            resourceInputs["publicSubnetIds"] = undefined /*out*/;
            resourceInputs["serviceGatewayId"] = undefined /*out*/;
            resourceInputs["vcnId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vcn.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a Vcn resource.
 */
export interface VcnArgs {
    /**
     * Cidr block to use for VCN
     */
    cidrBlock: string;
    /**
     * Compartment ID to deploy into
     */
    compartmentId: pulumi.Input<string>;
    createInternetGateway?: boolean;
    createNatGateway?: boolean;
    createServiceGateway?: boolean;
    /**
     * DNS labels for VCN
     */
    dnsLabel?: pulumi.Input<string>;
    /**
     * Enable ipv6 for VCN
     */
    ipv6Enabled?: pulumi.Input<boolean>;
    /**
     * Number of public and private subnets to create
     */
    numberOfSubnets?: number;
}
